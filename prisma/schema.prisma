generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  googleId  String   @unique()
  name      String   @unique()
  email     String   @unique()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  ownedOrganizations Organization[]       @relation("OrganizationOwner")
  organizations      OrganizationMember[]

  ownedProjects Project[]       @relation("ProjectOwner")
  projects      ProjectMember[]

  workItemsCreated  WorkItem[] @relation("WorkItemCreator")
  workItemsAssigned WorkItem[] @relation("WorkItemOwner")

  @@map("user")
}

model Organization {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  owner   User   @relation("OrganizationOwner", fields: [ownerId], references: [id])
  ownerId String @db.ObjectId

  members  OrganizationMember[]
  projects Project[]

  @@map("organization")
}

model OrganizationMember {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @db.ObjectId

  @@unique([userId, organizationId])
  @@map("organizationMember")
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId

  owner   User   @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId String @db.ObjectId

  members ProjectMember[]

  sprints Sprint[]

  workItems WorkItem[]

  @@map("project")
}

model ProjectMember {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @db.ObjectId

  @@unique([userId, projectId])
  @@map("projectMember")
}

enum SPRINT_STATUS {
  PLANNED
  STARTED
  CLOSED
}

model Sprint {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  startDate DateTime      @default(now())
  endDate   DateTime
  status    SPRINT_STATUS @default(PLANNED)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt()

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @db.ObjectId

  workItems WorkItem[]

  @@map("sprint")
}

enum WORK_ITEM_STATUS {
  PENDING
  IN_PROGRESS
  DONE
  CLOSED
}

enum WORK_ITEM_TYPE {
  NONE
  STORY
  TAKS
  BUG
}

model WorkItem {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  type        WORK_ITEM_TYPE   @default(NONE)
  storyPoint  Int?
  status      WORK_ITEM_STATUS @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt()

  createdBy       User   @relation("WorkItemCreator", fields: [createdByUserId], references: [id])
  createdByUserId String @db.ObjectId

  assignedTo       User   @relation("WorkItemOwner", fields: [assignedToUserId], references: [id])
  assignedToUserId String @db.ObjectId

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @db.ObjectId

  sprint   Sprint? @relation(fields: [sprintId], references: [id])
  sprintId String? @db.ObjectId

  @@map("workItem")
}
